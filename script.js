// --- L·∫•y c√°c ph·∫ßn t·ª≠ DOM ---
const screens = document.querySelectorAll('.screen');
const startScreen = document.getElementById('start-screen');
const gameScreen = document.getElementById('game-screen');
const boardElement = document.getElementById('game-board');
const statusElement = document.getElementById('game-status'); // ƒê·ªïi ID
const resultModal = document.getElementById('result-modal');
const resultTitle = document.getElementById('result-title');
const resultMessage = document.getElementById('result-message');

// N√∫t b·∫•m
const presetSizeButtons = startScreen.querySelectorAll('.size-btn');
const customSizeInput = document.getElementById('board-size-start'); // ƒê·ªïi ID
const startCustomBtn = document.getElementById('start-custom-btn');
const newGameBtn = document.getElementById('new-game-btn'); // N√∫t tr√™n game screen
const resetBoardBtn = document.getElementById('reset-board-btn'); // ƒê·ªïi ID
const playAgainBtn = document.getElementById('play-again-btn'); // N√∫t trong modal
const newGameModalBtn = document.getElementById('new-game-modal-btn'); // N√∫t trong modal

// --- Bi·∫øn tr·∫°ng th√°i game ---
let board = [];
let currentPlayer = 'X';
let gameActive = true;
let boardSize = 0; // B·∫Øt ƒë·∫ßu v·ªõi 0, y√™u c·∫ßu ch·ªçn
let winCondition = 5;
let currentCells = []; // L∆∞u c√°c ph·∫ßn t·ª≠ cell DOM ƒë·ªÉ d·ªÖ reset

// --- H√†m ƒëi·ªÅu khi·ªÉn hi·ªÉn th·ªã M√†n h√¨nh/Modal ---
function showScreen(screenId) {
    screens.forEach(screen => {
        screen.classList.remove('active');
    });
    const activeScreen = document.getElementById(screenId);
    if (activeScreen) {
        activeScreen.classList.add('active');
    }
}

function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
    }
}


// --- H√†m Kh·ªüi t·∫°o Game ---
function initializeGame(size) {
    if (size < 3 || size > 20) {
        console.error("K√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá:", size);
        // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng ·ªü ƒë√¢y
        alert("K√≠ch th∆∞·ªõc b√†n c·ªù ph·∫£i t·ª´ 3 ƒë·∫øn 20.");
        // Quay l·∫°i m√†n h√¨nh b·∫Øt ƒë·∫ßu n·∫øu ƒëang ·ªü m√†n h√¨nh game
        if(gameScreen.classList.contains('active')) {
            showScreen('start-screen');
        }
        return; // Kh√¥ng kh·ªüi t·∫°o n·∫øu size kh√¥ng h·ª£p l·ªá
    }

    boardSize = size;
    if (boardSize <= 4) {
        winCondition = boardSize;
    } else {
        winCondition = 5;
    }

    board = Array(boardSize).fill(null).map(() => Array(boardSize).fill(''));
    currentPlayer = 'X';
    gameActive = true;
    statusElement.textContent = `L∆∞·ª£t c·ªßa ${currentPlayer}`;
    statusElement.style.color = 'var(--text-dark)'; // Reset m√†u status
    currentCells = []; // Reset m·∫£ng DOM cells

    boardElement.innerHTML = '';
    boardElement.style.gridTemplateColumns = `repeat(${boardSize}, 1fr)`;

    // C·∫≠p nh·∫≠t class font-size
    boardElement.classList.remove('size-medium', 'size-large');
    if (boardSize >= 8 && boardSize <= 12) {
        boardElement.classList.add('size-medium');
    } else if (boardSize > 12) {
        boardElement.classList.add('size-large');
    }

    // --- T·∫°o √¥ c·ªù ---
    for (let row = 0; row < boardSize; row++) {
        for (let col = 0; col < boardSize; col++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.row = row;
            cell.dataset.col = col;
            // Th√™m th·∫ª span b√™n trong ƒë·ªÉ ch·ª©a X/O - gi√∫p ·ªïn ƒë·ªãnh h∆°n
            const span = document.createElement('span');
            cell.appendChild(span);

            cell.addEventListener('click', handleCellClick);
            boardElement.appendChild(cell);
            currentCells.push(cell); // L∆∞u l·∫°i tham chi·∫øu DOM
        }
    }

    // Chuy·ªÉn sang m√†n h√¨nh ch∆°i game
    showScreen('game-screen');
    hideModal('result-modal'); // ƒê·∫£m b·∫£o modal k·∫øt qu·∫£ ƒë√£ t·∫Øt
}

// --- H√†m x·ª≠ l√Ω khi click v√†o √¥ ---
function handleCellClick(event) {
    const clickedCell = event.currentTarget; // D√πng currentTarget an to√†n h∆°n
    // L·∫•y span b√™n trong ƒë·ªÉ ƒëi·ªÅn X/O
    const span = clickedCell.querySelector('span');

    // Ki·ªÉm tra span c√≥ t·ªìn t·∫°i kh√¥ng
    if (!span) {
        console.error("Kh√¥ng t√¨m th·∫•y th·∫ª span b√™n trong cell.");
        return;
    }

    const row = parseInt(clickedCell.dataset.row);
    const col = parseInt(clickedCell.dataset.col);

    if (!gameActive || board[row][col] !== '') {
        return;
    }

    // Th·ª±c hi·ªán n∆∞·ªõc ƒëi
    makeMove(row, col, clickedCell, span);

    // Ki·ªÉm tra th·∫Øng/h√≤a
    const winningLine = checkWin(row, col); // H√†m checkWin tr·∫£ v·ªÅ m·∫£ng √¥ th·∫Øng ho·∫∑c false
    if (winningLine) {
        endGame(false, winningLine); // Th·∫Øng
    } else if (isBoardFull()) {
        endGame(true, null); // H√≤a
    } else {
        switchPlayer(); // ƒê·ªïi l∆∞·ª£t
    }
}

// --- H√†m th·ª±c hi·ªán n∆∞·ªõc ƒëi ---
function makeMove(row, col, cellElement, spanElement) {
    board[row][col] = currentPlayer;
    spanElement.textContent = currentPlayer; // Ghi v√†o span
    cellElement.classList.add(currentPlayer.toLowerCase()); // Th√™m class 'x' ho·∫∑c 'o' v√†o cell
    // Kh√¥ng cho click l·∫°i √¥ n√†y
    cellElement.removeEventListener('click', handleCellClick);
    cellElement.style.cursor = 'not-allowed';
}

// --- H√†m ƒë·ªïi l∆∞·ª£t ch∆°i ---
function switchPlayer() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    statusElement.textContent = `L∆∞·ª£t c·ªßa ${currentPlayer}`;
}

// --- H√†m ki·ªÉm tra th·∫Øng (C·∫≠p nh·∫≠t ƒë·ªÉ tr·∫£ v·ªÅ ƒë∆∞·ªùng th·∫Øng) ---
function checkWin(row, col) {
    const player = board[row][col];
    const directions = [
        { dr: 0, dc: 1 }, { dr: 1, dc: 0 }, { dr: 1, dc: 1 }, { dr: 1, dc: -1 }
    ];

    for (const { dr, dc } of directions) {
        let count = 1;
        const line = [{ r: row, c: col }]; // L∆∞u c√°c √¥ tr√™n ƒë∆∞·ªùng th·∫Øng

        // ƒê·∫øm xu√¥i
        for (let i = 1; i < winCondition; i++) {
            const nr = row + dr * i;
            const nc = col + dc * i;
            if (nr >= 0 && nr < boardSize && nc >= 0 && nc < boardSize && board[nr][nc] === player) {
                count++;
                line.push({ r: nr, c: nc });
            } else break;
        }

        // ƒê·∫øm ng∆∞·ª£c
        for (let i = 1; i < winCondition; i++) {
            const nr = row - dr * i;
            const nc = col - dc * i;
            if (nr >= 0 && nr < boardSize && nc >= 0 && nc < boardSize && board[nr][nc] === player) {
                count++;
                line.push({ r: nr, c: nc });
            } else break;
        }

        if (count >= winCondition) {
            return line; // Tr·∫£ v·ªÅ m·∫£ng t·ªça ƒë·ªô c√°c √¥ th·∫Øng
        }
    }
    return false; // Kh√¥ng th·∫Øng
}

// --- H√†m ki·ªÉm tra b·∫£ng ƒë·∫ßy ---
function isBoardFull() {
    return board.every(row => row.every(cell => cell !== ''));
}

// --- H√†m k·∫øt th√∫c Game ---
function endGame(isDraw, winningLine) {
    gameActive = false;
    let title = '';
    let message = '';
    let winnerColor = 'var(--text-dark)';

    if (isDraw) {
        title = "H√≤a C·ªù! ü§ù";
        message = "Kh√¥ng ai th·∫Øng c·∫£. Th·ª≠ l·∫°i nh√©!";
        winnerColor = 'var(--secondary-color)'; // M√†u h√≤a
        statusElement.textContent = "H√≤a!";
        statusElement.style.color = winnerColor;

    } else {
        title = `Ng∆∞·ªùi ch∆°i ${currentPlayer} Th·∫Øng! üéâ`;
        message = `Ch√∫c m·ª´ng ng∆∞·ªùi ch∆°i ${currentPlayer}!`;
        winnerColor = currentPlayer === 'X' ? 'var(--accent-color)' : 'var(--accent-color-alt)';
        statusElement.textContent = ` ${currentPlayer} th·∫Øng!`;
        statusElement.style.color = winnerColor;

        // Highlight ƒë∆∞·ªùng th·∫Øng
        if (winningLine) {
            highlightWinningLine(winningLine);
        }
    }

    // Hi·ªÉn th·ªã Modal k·∫øt qu·∫£
    resultTitle.textContent = title;
    resultMessage.textContent = message;
    resultTitle.style.color = winnerColor;
    showModal('result-modal');
}

// --- H√†m Highlight ƒë∆∞·ªùng th·∫Øng ---
function highlightWinningLine(line) {
    line.forEach(({ r, c }) => {
        // T√¨m ƒë√∫ng cell DOM d·ª±a tr√™n t·ªça ƒë·ªô
        const cellIndex = r * boardSize + c;
        if (currentCells[cellIndex]) {
            currentCells[cellIndex].classList.add('winning');
        }
        // C√°ch kh√°c: d√πng querySelector (ch·∫≠m h∆°n ch√∫t n·∫øu b·∫£ng l·ªõn)
        // const cellElement = boardElement.querySelector(`[data-row='${r}'][data-col='${c}']`);
        // if (cellElement) {
        //     cellElement.classList.add('winning');
        // }
    });
}

// --- H√†m Reset Ch·ªâ B·∫£ng C·ªù (Ch∆°i l·∫°i c√πng k√≠ch th∆∞·ªõc) ---
function resetBoard() {
    if (boardSize < 3) return; // Ch∆∞a c√≥ k√≠ch th∆∞·ªõc th√¨ kh√¥ng reset

    board = Array(boardSize).fill(null).map(() => Array(boardSize).fill(''));
    currentPlayer = 'X';
    gameActive = true;
    statusElement.textContent = `L∆∞·ª£t c·ªßa ${currentPlayer}`;
    statusElement.style.color = 'var(--text-dark)';

    // Reset tr·∫°ng th√°i c√°c √¥ DOM
    currentCells.forEach(cell => {
        const span = cell.querySelector('span');
        if (span) span.textContent = ''; // X√≥a text
        cell.classList.remove('x', 'o', 'winning'); // X√≥a class
        cell.style.cursor = 'pointer';
        // G·∫Øn l·∫°i event listener n·∫øu ƒë√£ b·ªã x√≥a
        cell.removeEventListener('click', handleCellClick); // X√≥a listener c≈© ƒë·ªÅ ph√≤ng tr√πng l·∫∑p
        cell.addEventListener('click', handleCellClick);
    });

    hideModal('result-modal'); // ·∫®n modal n·∫øu ƒëang m·ªü
}


// --- G·∫Øn Event Listeners ---

// M√†n h√¨nh b·∫Øt ƒë·∫ßu
presetSizeButtons.forEach(button => {
    button.addEventListener('click', () => {
        const size = parseInt(button.dataset.size);
        customSizeInput.value = size; // C·∫≠p nh·∫≠t input
        initializeGame(size);
    });
});

startCustomBtn.addEventListener('click', () => {
    const size = parseInt(customSizeInput.value);
    initializeGame(size); // H√†m initializeGame ƒë√£ c√≥ ki·ªÉm tra size
});

// M√†n h√¨nh ch∆°i game
resetBoardBtn.addEventListener('click', resetBoard); // Ch∆°i l·∫°i v√°n hi·ªán t·∫°i

newGameBtn.addEventListener('click', () => {
    // H·ªèi x√°c nh·∫≠n n·∫øu ƒëang ch∆°i d·ªü? (T√πy ch·ªçn)
    // if (gameActive && !isBoardFull() && board.some(r=>r.some(c=> c !==''))) {
    //     if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën b·∫Øt ƒë·∫ßu v√°n m·ªõi? Ti·∫øn tr√¨nh hi·ªán t·∫°i s·∫Ω m·∫•t.")) {
    //         return;
    //     }
    // }
    showScreen('start-screen'); // Quay v·ªÅ m√†n h√¨nh ch·ªçn size
    boardSize = 0; // Reset size ƒë·ªÉ b·∫Øt bu·ªôc ch·ªçn l·∫°i
});

// Modal k·∫øt qu·∫£
playAgainBtn.addEventListener('click', () => {
    resetBoard(); // Ch·ªâ reset b·∫£ng, gi·ªØ nguy√™n size
});

newGameModalBtn.addEventListener('click', () => {
    hideModal('result-modal');
    showScreen('start-screen'); // Quay v·ªÅ m√†n h√¨nh ch·ªçn size
    boardSize = 0; // Reset size
});


// --- Kh·ªüi t·∫°o ban ƒë·∫ßu ---
showScreen('start-screen'); // Hi·ªÉn th·ªã m√†n h√¨nh b·∫Øt ƒë·∫ßu khi t·∫£i trang